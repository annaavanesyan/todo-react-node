{"version":3,"sources":["logo.svg","serviceWorker.js","constants/SwitcherModes.js","components/Switcher.js","App.js","components/Listener.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","SwitcherModes","LISTENER","EMITTER","Switcher","state","className","Switch","onChange","this","props","changeMode","color","Component","globalURL","App","mode","listeners","emitters","items","loading","todoItem","event","checked","setState","componentDidMount","fetch","then","res","json","addItem","e","preventDefault","method","body","JSON","stringify","item","headers","deleteItem","id","console","log","src","logo","width","height","alt","map","i","key","onSubmit","type","value","target","placeholder","length","role","onClick","aria-label","aria-hidden","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5532e3b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const SwitcherModes = {\n    LISTENER: 'listener',\n    EMITTER: 'emitter'\n};\n\nexport default SwitcherModes;\n","import React, { Component } from 'react';\nimport Switch from '@material-ui/core/Switch';\n\nclass Switcher extends Component {\n    state = {};\n\n    render() {\n        return (\n            <div className=\"switcher-wrapper\">\n                <div>Listener</div>\n                <Switch\n                    onChange={this.props.changeMode}\n                    className=\"switcher\"\n                    color=\"primary\"\n                />\n                <div>Emitter</div>\n            </div>\n        );\n    }\n}\n\nexport default Switcher;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SwitcherModes from './constants/SwitcherModes';\n\nimport Switcher from './components/Switcher';\nimport Listener from './components/Listener';\nconst globalURL = 'http://localhost:4567/';\n\nclass App extends Component {\n    state = {\n        mode: SwitcherModes.LISTENER,\n        listeners: [],\n        emitters: [],\n        items: [],\n        loading: true,\n        todoItem: ''\n    };\n\n    changeMode = (event, checked) => {\n        this.setState({\n            mode: checked ? SwitcherModes.EMITTER : SwitcherModes.LISTENER\n        });\n    };\n\n    componentDidMount = () => {\n        fetch(`${globalURL}items`)\n            .then(res => res.json())\n            .then(items => {\n                return this.setState({ items, loading: false });\n            });\n    };\n\n    addItem = e => {\n        e.preventDefault();\n\n        fetch(`${globalURL}items`, {\n            method: 'POST',\n            body: JSON.stringify({ item: this.state.todoItem }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(items => {\n                this.setState({ items, todoItem: '' });\n            });\n    };\n\n    deleteItem = id => {\n        console.log(id);\n        fetch(`${globalURL}items/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(items => {\n                this.setState({ items });\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <nav className=\"navbar navbar-light mb-0 bg-light\">\n                    <span className=\"navbar-brand h1\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"logo\"\n                        />\n                        Socket Client\n                    </span>\n                </nav>\n                <Switcher changeMode={this.changeMode} />\n                <div className=\"emitters-wrapper\">\n                {this.state.emitters.map((item, i) => {\n                        return <tr key={i} className=\"emitter\"></tr>;\n                    })}\n                </div>\n                <div className=\"px-3 py-2\">\n                    <form\n                        className=\"form-inline my-3 align-items-center\"\n                        onSubmit={this.addItem}\n                    >\n                        <div className=\"form-group mb-2 col-8  col-sm-10 align-items-center\">\n                            <input\n                                type=\"text\"\n                                value={this.state.todoItem}\n                                onChange={e => {\n                                    this.setState({\n                                        todoItem: e.target.value\n                                    });\n                                }}\n                                className=\"form-control col-12\"\n                                id=\"inlineFormInputName\"\n                                placeholder=\"what's next?\"\n                            />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary mb-2\">\n                            Submit\n                        </button>\n                    </form>\n\n                    {this.state.loading && (\n                        <p className=\"align-self-center\">Loading...</p>\n                    )}\n\n                    {!this.state.loading && this.state.items.length === 0 && (\n                        <div className=\"alert alert-secondary\" role=\"alert\">\n                            All Done! - No Items Left\n                        </div>\n                    )}\n\n                    {\n                        <table className=\"table table-hover table-striped\">\n                            <tbody>\n                                {this.state.items.map((item, i) => {\n                                    return (\n                                        <tr key={item.id} className=\"row\">\n                                            <td className=\"col-1\">{i + 1}</td>\n                                            <td className=\"col-10\">\n                                                {item.item}\n                                            </td>\n                                            <td className=\"col-1\">\n                                                <button\n                                                    type=\"button\"\n                                                    onClick={() =>\n                                                        this.deleteItem(item.id)\n                                                    }\n                                                    aria-label=\"Close\"\n                                                    className=\"close\"\n                                                >\n                                                    <span aria-hidden=\"true\">\n                                                        &times;\n                                                    </span>\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </table>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass Listener extends Component {\n    state = { event: '' };\n    render() {\n        return (\n            <div className=\"listener\">\n                <div className=\"event\">\n                    <p>message-event: </p>\n                    <input type=\"text\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Listener;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// components\nimport App from './App';\n\n// styles\nimport './styles/index.css';\n\nconsole.log(document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}